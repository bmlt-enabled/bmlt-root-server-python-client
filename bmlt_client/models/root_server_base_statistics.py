# coding: utf-8

"""
    BMLT

    BMLT Admin API Documentation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from bmlt_client.models.root_server_base_statistics_meetings import RootServerBaseStatisticsMeetings
from bmlt_client.models.root_server_base_statistics_service_bodies import RootServerBaseStatisticsServiceBodies

class RootServerBaseStatistics(BaseModel):
    """
    RootServerBaseStatistics
    """
    service_bodies: RootServerBaseStatisticsServiceBodies = Field(..., alias="serviceBodies")
    meetings: RootServerBaseStatisticsMeetings = Field(...)
    __properties = ["serviceBodies", "meetings"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RootServerBaseStatistics:
        """Create an instance of RootServerBaseStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of service_bodies
        if self.service_bodies:
            _dict['serviceBodies'] = self.service_bodies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of meetings
        if self.meetings:
            _dict['meetings'] = self.meetings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RootServerBaseStatistics:
        """Create an instance of RootServerBaseStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RootServerBaseStatistics.parse_obj(obj)

        _obj = RootServerBaseStatistics.parse_obj({
            "service_bodies": RootServerBaseStatisticsServiceBodies.from_dict(obj.get("serviceBodies")) if obj.get("serviceBodies") is not None else None,
            "meetings": RootServerBaseStatisticsMeetings.from_dict(obj.get("meetings")) if obj.get("meetings") is not None else None
        })
        return _obj


