# coding: utf-8

"""
    BMLT

    BMLT Admin API Documentation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class UserUpdate(BaseModel):
    """
    UserUpdate
    """
    username: StrictStr = Field(...)
    type: StrictStr = Field(...)
    display_name: StrictStr = Field(..., alias="displayName")
    description: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    owner_id: Optional[StrictStr] = Field(None, alias="ownerId")
    password: Optional[StrictStr] = None
    __properties = ["username", "type", "displayName", "description", "email", "ownerId", "password"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserUpdate:
        """Create an instance of UserUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserUpdate:
        """Create an instance of UserUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserUpdate.parse_obj(obj)

        _obj = UserUpdate.parse_obj({
            "username": obj.get("username"),
            "type": obj.get("type"),
            "display_name": obj.get("displayName"),
            "description": obj.get("description"),
            "email": obj.get("email"),
            "owner_id": obj.get("ownerId"),
            "password": obj.get("password")
        })
        return _obj


