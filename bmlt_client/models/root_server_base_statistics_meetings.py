# coding: utf-8

"""
    BMLT

    BMLT Admin API Documentation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt

class RootServerBaseStatisticsMeetings(BaseModel):
    """
    RootServerBaseStatisticsMeetings
    """
    num_total: StrictInt = Field(..., alias="numTotal")
    num_in_person: StrictInt = Field(..., alias="numInPerson")
    num_virtual: StrictInt = Field(..., alias="numVirtual")
    num_hybrid: StrictInt = Field(..., alias="numHybrid")
    num_unknown: StrictInt = Field(..., alias="numUnknown")
    __properties = ["numTotal", "numInPerson", "numVirtual", "numHybrid", "numUnknown"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RootServerBaseStatisticsMeetings:
        """Create an instance of RootServerBaseStatisticsMeetings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RootServerBaseStatisticsMeetings:
        """Create an instance of RootServerBaseStatisticsMeetings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RootServerBaseStatisticsMeetings.parse_obj(obj)

        _obj = RootServerBaseStatisticsMeetings.parse_obj({
            "num_total": obj.get("numTotal"),
            "num_in_person": obj.get("numInPerson"),
            "num_virtual": obj.get("numVirtual"),
            "num_hybrid": obj.get("numHybrid"),
            "num_unknown": obj.get("numUnknown")
        })
        return _obj


