# coding: utf-8

"""
    BMLT

    BMLT Admin API Documentation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List
from pydantic import BaseModel, Field, StrictStr, conlist

class ValidationError(BaseModel):
    """
    ValidationError
    """
    message: StrictStr = Field(...)
    errors: Dict[str, conlist(StrictStr)] = Field(...)
    __properties = ["message", "errors"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ValidationError:
        """Create an instance of ValidationError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in errors (dict of array)
        _field_dict_of_array = {}
        if self.errors:
            for _key in self.errors:
                if self.errors[_key]:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.errors[_key]
                    ]
            _dict['errors'] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ValidationError:
        """Create an instance of ValidationError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ValidationError.parse_obj(obj)

        _obj = ValidationError.parse_obj({
            "message": obj.get("message"),
            "errors": obj.get("errors")
        })
        return _obj


