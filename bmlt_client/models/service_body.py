# coding: utf-8

"""
    BMLT

    BMLT Admin API Documentation

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

class ServiceBody(BaseModel):
    """
    ServiceBody
    """
    parent_id: StrictInt = Field(..., alias="parentId")
    name: StrictStr = Field(...)
    description: StrictStr = Field(...)
    type: StrictStr = Field(...)
    admin_user_id: StrictInt = Field(..., alias="adminUserId")
    assigned_user_ids: conlist(StrictInt) = Field(..., alias="assignedUserIds")
    url: StrictStr = Field(...)
    helpline: StrictStr = Field(...)
    email: StrictStr = Field(...)
    world_id: StrictStr = Field(..., alias="worldId")
    id: StrictInt = Field(...)
    __properties = ["parentId", "name", "description", "type", "adminUserId", "assignedUserIds", "url", "helpline", "email", "worldId", "id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServiceBody:
        """Create an instance of ServiceBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServiceBody:
        """Create an instance of ServiceBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ServiceBody.parse_obj(obj)

        _obj = ServiceBody.parse_obj({
            "parent_id": obj.get("parentId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "admin_user_id": obj.get("adminUserId"),
            "assigned_user_ids": obj.get("assignedUserIds"),
            "url": obj.get("url"),
            "helpline": obj.get("helpline"),
            "email": obj.get("email"),
            "world_id": obj.get("worldId"),
            "id": obj.get("id")
        })
        return _obj


